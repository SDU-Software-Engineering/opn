/**
 * Banking dotnet Core Wep API
 * A simple api to use banking services
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import dk.sdu.mmmi.opn.swaggerbank.ApiException;
import dk.sdu.mmmi.opn.swaggerbank.model.CredentialAndAccount;
import dk.sdu.mmmi.opn.swaggerbank.model.CustomerDTO;
import dk.sdu.mmmi.opn.swaggerbank.model.Credential;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BankApi
 */
public class BankApiTest {

    private final BankApi api = new BankApi();

    
    /**
     * Placeholder for the action that is invoked when you ask to accrue interest             Functionality: for every account, add positive or negative interest to             the balance of the account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiBankAccrueInterestPostTest() throws ApiException {
        // String response = api.apiBankAccrueInterestPost();

        // TODO: test validations
    }
    
    /**
     * Create an account for the given user
     *
     * This is an example of how the JSON should be structured             {                 \&quot;credential\&quot; : {                  \&quot;name\&quot; : \&quot;Nicolai\&quot;,                  \&quot;id\&quot; : 1                  },                 \&quot;account\&quot; : {                  \&quot;name\&quot; : \&quot;Budget Account\&quot;,                  \&quot;positiveInterest\&quot; : 2.0,                  \&quot;negativeInterest\&quot; : 5.0                 }             }
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiBankCreateAccountPostTest() throws ApiException {
        CredentialAndAccount credentialAndAccount = null;
        // CustomerDTO response = api.apiBankCreateAccountPost(credentialAndAccount);

        // TODO: test validations
    }
    
    /**
     * Create a new user
     *
     * This is an example of how the BODY should be structured              \&quot;Nicolai Oksen\&quot;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiBankCreatePostTest() throws ApiException {
        String name = null;
        // CustomerDTO response = api.apiBankCreatePost(name);

        // TODO: test validations
    }
    
    /**
     * Deposit money on the given account of the given customer
     *
     * This is an example of how the JSON should be structured             {             \&quot;credential\&quot; : {              \&quot;name\&quot; : \&quot;Nicolai\&quot;,              \&quot;id\&quot; : 1              },             \&quot;accountId\&quot; : 2,             \&quot;amount\&quot; : 100.0             }
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiBankDepositPostTest() throws ApiException {
        Object deposit = null;
        // CustomerDTO response = api.apiBankDepositPost(deposit);

        // TODO: test validations
    }
    
    /**
     * Login to the system with the given user
     *
     * This is an example of how the JSON should be structured             {                 \&quot;name\&quot; : \&quot;Nicolai\&quot;,                 \&quot;id\&quot; : 1             }
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiBankLoginPostTest() throws ApiException {
        Credential credential = null;
        // CustomerDTO response = api.apiBankLoginPost(credential);

        // TODO: test validations
    }
    
    /**
     * Withdraw money from the given account of the given customer
     *
     * This is an example of how the JSON should be structured             {             \&quot;credential\&quot; : {              \&quot;name\&quot; : \&quot;Nicolai\&quot;,              \&quot;id\&quot; : 1              },             \&quot;accountId\&quot; : 2,             \&quot;amount\&quot; : 100.0             }
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiBankWithdrawPostTest() throws ApiException {
        Object withdraw = null;
        // CustomerDTO response = api.apiBankWithdrawPost(withdraw);

        // TODO: test validations
    }
    
}
