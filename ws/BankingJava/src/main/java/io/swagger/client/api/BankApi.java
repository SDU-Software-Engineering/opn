/**
 * Banking dotnet Core Wep API
 * A simple api to use banking services
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import dk.sdu.mmmi.opn.swaggerbank.ApiCallback;
import dk.sdu.mmmi.opn.swaggerbank.ApiClient;
import dk.sdu.mmmi.opn.swaggerbank.ApiException;
import dk.sdu.mmmi.opn.swaggerbank.ApiResponse;
import dk.sdu.mmmi.opn.swaggerbank.Configuration;
import dk.sdu.mmmi.opn.swaggerbank.Pair;
import dk.sdu.mmmi.opn.swaggerbank.ProgressRequestBody;
import dk.sdu.mmmi.opn.swaggerbank.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import dk.sdu.mmmi.opn.swaggerbank.model.CredentialAndAccount;
import dk.sdu.mmmi.opn.swaggerbank.model.CustomerDTO;
import dk.sdu.mmmi.opn.swaggerbank.model.Credential;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BankApi {
    private ApiClient apiClient;

    public BankApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BankApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for apiBankAccrueInterestPost */
    private com.squareup.okhttp.Call apiBankAccrueInterestPostCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/api/Bank/accrue-interest".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Placeholder for the action that is invoked when you ask to accrue interest             Functionality: for every account, add positive or negative interest to             the Balance of the account.
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String apiBankAccrueInterestPost() throws ApiException {
        ApiResponse<String> resp = apiBankAccrueInterestPostWithHttpInfo();
        return resp.getData();
    }

    /**
     * Placeholder for the action that is invoked when you ask to accrue interest             Functionality: for every account, add positive or negative interest to             the Balance of the account.
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> apiBankAccrueInterestPostWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = apiBankAccrueInterestPostCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Placeholder for the action that is invoked when you ask to accrue interest             Functionality: for every account, add positive or negative interest to             the Balance of the account. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiBankAccrueInterestPostAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiBankAccrueInterestPostCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for apiBankCreateAccountPost */
    private com.squareup.okhttp.Call apiBankCreateAccountPostCall(CredentialAndAccount credentialAndAccount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = credentialAndAccount;
        

        // create path and map variables
        String localVarPath = "/api/Bank/create-account".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create an account for the given user
     * This is an example of how the JSON should be structured             {                 \&quot;credential\&quot; : {                  \&quot;name\&quot; : \&quot;Nicolai\&quot;,                  \&quot;id\&quot; : 1                  },                 \&quot;account\&quot; : {                  \&quot;name\&quot; : \&quot;Budget Account\&quot;,                  \&quot;PositiveInterest\&quot; : 2.0,                  \&quot;NegativeInterest\&quot; : 5.0                 }             }
     * @param credentialAndAccount CredentialAndAccount object containing credential and account information (optional)
     * @return CustomerDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDTO apiBankCreateAccountPost(CredentialAndAccount credentialAndAccount) throws ApiException {
        ApiResponse<CustomerDTO> resp = apiBankCreateAccountPostWithHttpInfo(credentialAndAccount);
        return resp.getData();
    }

    /**
     * Create an account for the given user
     * This is an example of how the JSON should be structured             {                 \&quot;credential\&quot; : {                  \&quot;name\&quot; : \&quot;Nicolai\&quot;,                  \&quot;id\&quot; : 1                  },                 \&quot;account\&quot; : {                  \&quot;name\&quot; : \&quot;Budget Account\&quot;,                  \&quot;PositiveInterest\&quot; : 2.0,                  \&quot;NegativeInterest\&quot; : 5.0                 }             }
     * @param credentialAndAccount CredentialAndAccount object containing credential and account information (optional)
     * @return ApiResponse&lt;CustomerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDTO> apiBankCreateAccountPostWithHttpInfo(CredentialAndAccount credentialAndAccount) throws ApiException {
        com.squareup.okhttp.Call call = apiBankCreateAccountPostCall(credentialAndAccount, null, null);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account for the given user (asynchronously)
     * This is an example of how the JSON should be structured             {                 \&quot;credential\&quot; : {                  \&quot;name\&quot; : \&quot;Nicolai\&quot;,                  \&quot;id\&quot; : 1                  },                 \&quot;account\&quot; : {                  \&quot;name\&quot; : \&quot;Budget Account\&quot;,                  \&quot;PositiveInterest\&quot; : 2.0,                  \&quot;NegativeInterest\&quot; : 5.0                 }             }
     * @param credentialAndAccount CredentialAndAccount object containing credential and account information (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiBankCreateAccountPostAsync(CredentialAndAccount credentialAndAccount, final ApiCallback<CustomerDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiBankCreateAccountPostCall(credentialAndAccount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for apiBankCreatePost */
    private com.squareup.okhttp.Call apiBankCreatePostCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = name;
        

        // create path and map variables
        String localVarPath = "/api/Bank/create".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a new user
     * This is an example of how the BODY should be structured              \&quot;Nicolai Oksen\&quot;
     * @param name Name of customer (optional)
     * @return CustomerDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDTO apiBankCreatePost(String name) throws ApiException {
        ApiResponse<CustomerDTO> resp = apiBankCreatePostWithHttpInfo(name);
        return resp.getData();
    }

    /**
     * Create a new user
     * This is an example of how the BODY should be structured              \&quot;Nicolai Oksen\&quot;
     * @param name Name of customer (optional)
     * @return ApiResponse&lt;CustomerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDTO> apiBankCreatePostWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = apiBankCreatePostCall(name, null, null);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new user (asynchronously)
     * This is an example of how the BODY should be structured              \&quot;Nicolai Oksen\&quot;
     * @param name Name of customer (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiBankCreatePostAsync(String name, final ApiCallback<CustomerDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiBankCreatePostCall(name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for apiBankDepositPost */
    private com.squareup.okhttp.Call apiBankDepositPostCall(Object deposit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deposit;
        

        // create path and map variables
        String localVarPath = "/api/Bank/deposit".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deposit money on the given account of the given customer
     * This is an example of how the JSON should be structured             {             \&quot;credential\&quot; : {              \&quot;name\&quot; : \&quot;Nicolai\&quot;,              \&quot;id\&quot; : 1              },             \&quot;accountId\&quot; : 2,             \&quot;amount\&quot; : 100.0             }
     * @param deposit JSON object containing credentials, account id and withdraw amount (optional)
     * @return CustomerDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDTO apiBankDepositPost(Object deposit) throws ApiException {
        ApiResponse<CustomerDTO> resp = apiBankDepositPostWithHttpInfo(deposit);
        return resp.getData();
    }

    /**
     * Deposit money on the given account of the given customer
     * This is an example of how the JSON should be structured             {             \&quot;credential\&quot; : {              \&quot;name\&quot; : \&quot;Nicolai\&quot;,              \&quot;id\&quot; : 1              },             \&quot;accountId\&quot; : 2,             \&quot;amount\&quot; : 100.0             }
     * @param deposit JSON object containing credentials, account id and withdraw amount (optional)
     * @return ApiResponse&lt;CustomerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDTO> apiBankDepositPostWithHttpInfo(Object deposit) throws ApiException {
        com.squareup.okhttp.Call call = apiBankDepositPostCall(deposit, null, null);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deposit money on the given account of the given customer (asynchronously)
     * This is an example of how the JSON should be structured             {             \&quot;credential\&quot; : {              \&quot;name\&quot; : \&quot;Nicolai\&quot;,              \&quot;id\&quot; : 1              },             \&quot;accountId\&quot; : 2,             \&quot;amount\&quot; : 100.0             }
     * @param deposit JSON object containing credentials, account id and withdraw amount (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiBankDepositPostAsync(Object deposit, final ApiCallback<CustomerDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiBankDepositPostCall(deposit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for apiBankLoginPost */
    private com.squareup.okhttp.Call apiBankLoginPostCall(Credential credential, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = credential;
        

        // create path and map variables
        String localVarPath = "/api/Bank/login".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Login to the system with the given user
     * This is an example of how the JSON should be structured             {                 \&quot;name\&quot; : \&quot;Nicolai\&quot;,                 \&quot;id\&quot; : 1             }
     * @param credential Login credentials for customer (optional)
     * @return CustomerDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDTO apiBankLoginPost(Credential credential) throws ApiException {
        ApiResponse<CustomerDTO> resp = apiBankLoginPostWithHttpInfo(credential);
        return resp.getData();
    }

    /**
     * Login to the system with the given user
     * This is an example of how the JSON should be structured             {                 \&quot;name\&quot; : \&quot;Nicolai\&quot;,                 \&quot;id\&quot; : 1             }
     * @param credential Login credentials for customer (optional)
     * @return ApiResponse&lt;CustomerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDTO> apiBankLoginPostWithHttpInfo(Credential credential) throws ApiException {
        com.squareup.okhttp.Call call = apiBankLoginPostCall(credential, null, null);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Login to the system with the given user (asynchronously)
     * This is an example of how the JSON should be structured             {                 \&quot;name\&quot; : \&quot;Nicolai\&quot;,                 \&quot;id\&quot; : 1             }
     * @param credential Login credentials for customer (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiBankLoginPostAsync(Credential credential, final ApiCallback<CustomerDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiBankLoginPostCall(credential, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for apiBankWithdrawPost */
    private com.squareup.okhttp.Call apiBankWithdrawPostCall(Object withdraw, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = withdraw;
        

        // create path and map variables
        String localVarPath = "/api/Bank/withdraw".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Withdraw money from the given account of the given customer
     * This is an example of how the JSON should be structured             {             \&quot;credential\&quot; : {              \&quot;name\&quot; : \&quot;Nicolai\&quot;,              \&quot;id\&quot; : 1              },             \&quot;accountId\&quot; : 2,             \&quot;amount\&quot; : 100.0             }
     * @param withdraw JSON object containing credentials, account id and withdraw amount (optional)
     * @return CustomerDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomerDTO apiBankWithdrawPost(Object withdraw) throws ApiException {
        ApiResponse<CustomerDTO> resp = apiBankWithdrawPostWithHttpInfo(withdraw);
        return resp.getData();
    }

    /**
     * Withdraw money from the given account of the given customer
     * This is an example of how the JSON should be structured             {             \&quot;credential\&quot; : {              \&quot;name\&quot; : \&quot;Nicolai\&quot;,              \&quot;id\&quot; : 1              },             \&quot;accountId\&quot; : 2,             \&quot;amount\&quot; : 100.0             }
     * @param withdraw JSON object containing credentials, account id and withdraw amount (optional)
     * @return ApiResponse&lt;CustomerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomerDTO> apiBankWithdrawPostWithHttpInfo(Object withdraw) throws ApiException {
        com.squareup.okhttp.Call call = apiBankWithdrawPostCall(withdraw, null, null);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Withdraw money from the given account of the given customer (asynchronously)
     * This is an example of how the JSON should be structured             {             \&quot;credential\&quot; : {              \&quot;name\&quot; : \&quot;Nicolai\&quot;,              \&quot;id\&quot; : 1              },             \&quot;accountId\&quot; : 2,             \&quot;amount\&quot; : 100.0             }
     * @param withdraw JSON object containing credentials, account id and withdraw amount (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiBankWithdrawPostAsync(Object withdraw, final ApiCallback<CustomerDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiBankWithdrawPostCall(withdraw, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomerDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
